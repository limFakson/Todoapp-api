"""
Django settings for todoapi project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from decouple import config

import dj_database_url

config_file_path = "../.env"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")
# os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG")
# os.environ.get("DEBUG", "False").lower() == "true"

# allowed host config import
allowed_hosts_str = config("ALLOWED_HOSTS", default="localhost")

# Split the string into a list of allowed hosts
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(" ")]

# os.environ.get("ALLOWED_HOSTS").split(" ")

APPEND_SLASH = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "django.contrib.staticfiles",
    "api.apps.ApiConfig",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# CORS_ALLOWED_ORIGINS = [
#     'https://yourmixjnr.github.io/To-do_List_HTML-CSS-JS/',
#     'localhost'
#     '127.0.0.1'
#     '*',
# ]

CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "todoapi.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "todoapi.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

#Determie what database to use based on the choice in env file
if config('MODE') == "Test":
    # Determine which database to use based on the .env file
    if config('DB_CHOICE') == "mysql":
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': config('MYSQL_DB_NAME'),
                'USER': config('MYSQL_DB_USER'),
                'PASSWORD': config('MYSQL_DB_PASSWORD', default=''),
                'HOST': config('MYSQL_DB_HOST', default='localhost'),
                'PORT': config('MYSQL_DB_PORT', default='3306'),
                'OPTIONS': {
                    'sql_mode': 'STRICT_TRANS_TABLES',
                    'charset': 'utf8mb4',
                }
            }
        }
    elif config('DB_CHOICE') == "postgres":
        DATABASES = {
            'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'))
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Determine which database to use based on the .env file
    if config('DB_CHOICE') == "postgres":
        DATABASES = {
            'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'))
        }
    else:
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }

# database_url = "postgres://movie_data_user:Dh25mLFMXYgbFTQihX58UQQ3akHInylM@dpg-cmrr61821fec739tb0jg-a.oregon-postgres.render.com/movie_data"
# # os.environ.get("DATABASE_URL")


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
